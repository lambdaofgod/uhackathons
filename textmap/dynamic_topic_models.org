#+title: Dynamic Topic Models

#+BEGIN_SRC python :session dynamic_topic_models.org  :exports both
import pandas as pd
roam_df = pd.read_csv("data/roam_nodes_df.csv")
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python :session dynamic_topic_models.org  :exports both
roam_df.shape
#+END_SRC

#+RESULTS:
| 7110 | 10 |

#+BEGIN_SRC python :session dynamic_topic_models.org  :exports both :async
from bertopic import BERTopic
from bertopic.representation import KeyBERTInspired, OpenAI, MaximalMarginalRelevance


representation_model =  #KeyBERTInspired()

topic_model = BERTopic(verbose=True, representation_model=representation_model)
topics, probs = topic_model.fit_transform(roam_df["text"].to_list())
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python :session dynamic_topic_models.org  :exports both :async
topics_over_time = topic_model.topics_over_time(roam_df["text"].to_list(), roam_df["creation_date"], nr_bins=20)
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python :session dynamic_topic_models.org  :exports both
topics_over_time.columns
#+END_SRC

#+RESULTS:
: Index(['Topic', 'Words', 'Frequency', 'Timestamp'], dtype='object')

#+BEGIN_SRC python :session dynamic_topic_models.org  :exports both
plotly_topics_over_time = topic_model.visualize_topics_over_time(topics_over_time, top_n_topics=20)
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python :session dynamic_topic_models.org  :exports both
plotly_topics_over_time.write_html("/tmp/plotly_topics_over_time.html")
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python :session dynamic_topic_models.org  :exports both
topics_over_time.columns
#+END_SRC

#+RESULTS:
: Index(['Topic', 'Words', 'Frequency', 'Timestamp', 'Name'], dtype='object')

#+BEGIN_SRC python :session dynamic_topic_models.org  :exports both
topics_over_time["Topic"].value_counts()
#+END_SRC

#+RESULTS:
#+begin_example
Topic
-1      20
 1      18
 2      18
 36     16
 28     15
        ..
 134     2
 127     2
 159     2
 144     1
 153     1
Name: count, Length: 165, dtype: int64
#+end_example

#+BEGIN_SRC python :session dynamic_topic_models.org  :exports both
topic_model.get_representative_docs(4)
#+END_SRC

#+RESULTS:
| Agents\n\n | Agents\n | Autogen vs CrewAI\n\n- CrewAI ~Agent~ - there are multiple Agent types - ~AssistantAgent~ and ~ConversableAgent~\n- ~Crew~ - ~GroupChat~\n\nIn autogen we specify interactions between agents in ~GroupChat~ and not in agents.\n\nIt is also possible to send messages in OpenAI chat format (that will work as examples/start of conversation)\n |
