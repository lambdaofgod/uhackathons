#+title: Llamaindex Webscraping

* HuggingFace Blog

Scraping huggingface blogposts

** LlamaIndex

Pros: can crawl stuff
Cons: bad formatting

#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both
import nltk
from selenium import webdriver
from llama_index.readers.web import SimpleWebPageReader, TrafilaturaWebReader, WholeSiteReader
from llama_index.readers.web import WholeSiteReader
#+END_SRC

#+RESULTS:
: None

These options will ensure we won't actually open browser in the background
#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both
options = webdriver.ChromeOptions()
options.add_argument("--headless")
options.add_argument("--no-sandbox")
driver = webdriver.Chrome(options=options)
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both :async
loader = WholeSiteReader(prefix="https://huggingface.co/blog", max_depth=11, driver=driver)

documents = loader.load_data(base_url="https://huggingface.co/blog?p=0")

f"found {len(documents)} documents"
#+END_SRC

#+RESULTS:
: found 2042 documents


#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both
import json


with open("data/huggingface_blog_llamaindex_documents.json", "w") as f:
    blog_documents = [d.dict() for d in documents if not "?p=" in d.metadata["URL"] and not "?tag=" in d.metadata["URL"]]
    json.dump(blog_documents, f)
#+END_SRC

#+RESULTS:
: None


#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both
len(blog_documents)
#+END_SRC

#+RESULTS:
: 1870

#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both
blog_documents[5]["metadata"]
#+END_SRC

#+RESULTS:
: {'URL': 'https://huggingface.co/blog/LocalFaceSwap/facefusion-311-windows-one-click-version'}

#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both
blog_documents[1]["text"]
#+END_SRC

#+RESULTS:
#+begin_example
Hugging Face
Models
Datasets
Spaces
Docs
Enterprise
Pricing
Log In
Sign Up
Back to Articles
Open-source DeepResearch ‚Äì Freeing our search agents
Published February 4, 2025
Update on GitHub
m-ric
Aymeric Roucher
albertvillanova
Albert Villanova del Moral
merve
Merve Noyan
thomwolf
Thomas Wolf
clefourrier
Cl√©mentine Fourrier
TLDR
Yesterday, OpenAI released Deep Research, a system that browses the web to summarize content and answer questions based on the summary. The system is impressive and blew our minds when we tried it for the first time.
One of the main results in the blog post is a strong improvement of performances on the General AI Assistants benchmark (GAIA), a benchmark we‚Äôve been playing with recently as well, where they successfully reached near 67% correct answers on 1-shot on average, and 47.6% on especially challenging ‚Äúlevel 3‚Äù questions that involve multiple steps of reasoning and tool usage (see below for a presentation of GAIA).
DeepResearch is composed of an LLM (which can be selected from the current list of LLMs provided by OpenAI, 4o, o1, o3, etc) and an internal ‚Äúagentic framework‚Äù which guide the LLM to use tools like web search and organize its actions in steps.
While powerful LLMs are now freely available in open-source (see e.g. the recent DeepSeek R1 model), OpenAI didn‚Äôt disclose much about the agentic framework underlying Deep Research‚Ä¶
So we decided to embark on a 24-hour mission to reproduce their results and open-source the needed framework along the way!
The clock is ticking, let‚Äôs go! ‚è±Ô∏è
Table of Contents
What are Agent frameworks and why they matter?
The GAIA benchmark
Building an open Deep Research
Using a CodeAgent
Making the right tools üõ†Ô∏è
Results üèÖ
Community reproductions
Most important next steps
What are Agent frameworks and why they matter?
An Agent framework is a layer on top of an LLM to make said LLM execute actions (like browse the web or read PDF documents), and organize its operations in a series of steps. For a quick intro to agents, check this great interview by Andrew Ng and our introduction blog post to the smolagents library. For a more detailed dive in agents you can subscribe to our agents course that starts in just a few days: link here.
Almost everyone has already experienced how powerful LLMs can be simply by playing with chatbots.. However, what not everyone is aware of yet is that integrating these LLMs into agentic systems can give them real superpowers!
Here is a recent example comparing the performance of a few frontier LLMs with and without an agentic framework (in this case the simple smolagents library) - using an agentic framework bumps performance by up to 60 points!
In fact, OpenAI also highlighted in its release blogpost how Deep Research performed dramatically better than standalone LLMs on the knowledge-intensive "Humanity‚Äôs Last Exam" benchmark.
So, what happens when we integrate our current top LLM in an agentic framework, to work toward an open-DeepResearch ?
A quick note: We‚Äôll benchmark our results on the same GAIA challenge but keep in mind that this is a work in progress. DeepResearch is a massive achievement and its open reproduction will take time. In particular, full parity will require improved browser use and interaction like OpenAI Operator is providing, i.e. beyond the current text-only web interaction we explore in this first step.
Let‚Äôs first understand the scope of the challenge: GAIA.
The GAIA benchmark
GAIA is arguably the most comprehensive benchmark for agents. Its questions are very difficult and hit on many challenges of LLM-based systems. Here is an example of a hard question:
Which of the fruits shown in the 2008 painting "Embroidery from Uzbekistan" were served as part of the October 1949 breakfast menu for the ocean liner that was later used as a floating prop for the film "The Last Voyage"? Give the items as a comma-separated list, ordering them in clockwise order based on their arrangement in the painting starting from the 12 o'clock position. Use the plural form of each fruit.
You can see this question involves several challenges:
Answering in a constrained format,
Using multimodal capabilities (to extract the fruits from the image),
Gathering several pieces of information, some depending on others:
Identifying the fruits on the picture
Finding which ocean liner was used as a floating prop for ‚ÄúThe Last Voyage‚Äù
Finding the October 1949 breakfast menu for the above ocean liner
Chaining together a problem-solving trajectory in the correct order.
Solving this requires both high-level planning abilities and rigorous execution, which are two areas where LLMs struggle when used alone.
So it‚Äôs an excellent test set for agent systems!
On GAIA‚Äôs public leaderboard, GPT-4 does not even reach 7% on the validation set when used without any agentic setup. On the other side of the spectrum, with Deep Research, OpenAI reached 67.36% score on the validation set, so an order of magnitude better! (Though we don‚Äôt know how they would actually fare on the private test set.)
Let‚Äôs see if we can do better with open source tools!
Building an open Deep Research
Using a CodeAgent
The first improvement over traditional AI agent systems we‚Äôll tackle is to use a so-called ‚Äúcode agent‚Äù. As shown by Wang et al. (2024), letting the agent express its actions in code has several advantages, but most notably that code is specifically designed to express complex sequences of actions.
Consider this example given by Wang et al.:
This highlights several advantages of using code:
Code actions are much more concise than JSON.
Need to run 4 parallel streams of 5 consecutive actions ? In JSON, you would need to generate 20 JSON blobs, each in their separate step; in Code it‚Äôs only 1 step.
On average, the paper shows that Code actions require 30% fewer steps than JSON, which amounts to an equivalent reduction in the tokens generated. Since LLM calls are often the dimensioning cost of agent systems, it means your agent system runs are ~30% cheaper.
Code enables to re-use tools from common libraries
Better performance in benchmarks, due to two reasons:
More intuitive way to express actions
Extensive exposure of LLMs to code in training
The advantages above were confirmed by our experiments on the agent_reasoning_benchmark.
From building smolagents we can also cite a notable additional advantage, which is a better handling of state: this is very useful for multimodal tasks in particular. Need to store this image/audio/other for later use? No problem, just assign it as a variable in your state and you can re-use it 4 steps later if needed. In JSON you would have to let the LLM name it in a dictionary key and trust the LLM will later understand that it can still use it.
Making the right tools üõ†Ô∏è
Now we need to provide the agent with the right set of tools.
1. A web browser. While a fully fledged web browser interaction like Operator will be needed to reach full performance, we started with an extremely simple text-based web browser for now for our first proof-of-concept. You can find the code here
2. A simple text inspector, to be able to read a bunch of text file format, find it here.
These tools were taken from the excellent Magentic-One agent by Microsoft Research, kudos to them! We didn‚Äôt change them much, as our goal was to get as high a performance as we can with the lowest complexity possible.
Here is a short roadmap of improvements which we feel would really improve these tools‚Äô performance (feel free to open a PR and contribute!):
extending the number of file formats which can be read.
proposing a more fine-grained handling of files.
replacing the web browser with a vision-based one, which we‚Äôve started doing here.
Results üèÖ
In our 24h+ reproduction sprint, we‚Äôve already seen steady improvements in the performance of our agent on GAIA!
We‚Äôve quickly gone up from the previous SoTA with an open framework, around 46% for Magentic-One, to our current performance of 55.15% on the validation set.
This bump in performance is due mostly to letting our agents write their actions in code! Indeed, when switching to a standard agent that writes actions in JSON instead of code, performance of the same setup is instantly degraded to 33% average on the validation set.
Here is the final agentic system.
We‚Äôve set up a live demo here for you to try it out!
However, this is only the beginning, and there are a lot of things to improve! Our open tools can be made better, the smolagents framework can also be tuned, and we‚Äôd love to explore the performance of better open models to support the agent.
We welcome the community to come join us in this endeavour, so we can leverage the power of open research together to build a great open-source agentic framework! It would allow anyone to run a DeepResearch-like agent at home, with their favorite models, using a completely local and customized approach!
Community Reproductions
While we were working on this and focusing on GAIA, other great open implementations of Deep Research emerged from the community, specifically from
dzhng,
assafelovic,
nickscamara,
jina-ai and
mshumer.
Each of these implementations use different libraries for indexing data, browsing the web and querying LLMs. In this project, we would like to reproduce the benchmarks presented by OpenAI (pass@1 average score), benchmark and document our findings with switching to open LLMs (like DeepSeek R1), using vision LMs, benchmark traditional tool calling against code-native agents.
Most important next steps
OpenAI‚Äôs Deep Research is probably boosted by the excellent web browser that they introduced with Operator.
So we‚Äôre tackling that next! In a more general problem: we‚Äôre going to build GUI agents, i.e. ‚Äúagents that view your screen and can act directly with mouse & keyboard‚Äù. If you‚Äôre excited about this project, and want to help everyone get access to such cool capabilities through open source, we‚Äôd love to get your contribution!
We‚Äôre also hiring a full time engineer to help us work on this and more, apply if you‚Äôre interested üôÇ
To get started with Open Deep Research, try the examples here.
Check the smolagents repo.
Read more about smolagents docs, introduction blog post.
More Articles from our Blog
Our Transformers Code Agent beats the GAIA benchmark!
By
m-ric
July 1, 2024
‚Ä¢
61
DABStep: Data Agent Benchmark for Multi-step Reasoning
By
eggie5
February 4, 2025
‚Ä¢
38
Community
sfield
6 days ago
DeepSeek's reasoning skills are probably particularly useful for something like this. But in my mind, particularly for academic research type tasks, the propaganda baked into the model is a non-starter. I tested out the new
DeepSeek-R1-Distill-Llama-70B-Uncensored-v2-Unbiased model yesterday. It was a very crude test, but I was quite impressed. I'm a newb over here, so take this as a light suggestion, just in case its helpful, nothing more.
3 replies
¬∑
üëç
3
+
TGAI87
5 days ago
Yep I'm very impressed with it too. Follows direction exceptionally well, and corrects (intentional) mistakes. Going to try to get it working nicely on my RTX 4090 with offloading.
+
Expand 2 replies
ElanInPhilly
5 days ago
This sounds pretty interesting, so I up voted based on description. However, the demo implementation definitely needs attention and work. Now, on several occasions, after long waits in 100+ user queues, I repeatedly get "Error in generating model output:
litellm.ContextWindowExceededError: litellm.BadRequestError: ContextWindowExceededError: OpenAIException - Error code: 400 - {'error': {'message': "This model's maximum context length is 128000 tokens. However, your messages resulted in 419624 tokens. Please reduce the length of the messages.", 'type': 'invalid_request_error', 'param': 'messages', 'code': 'context_length_exceeded'}}". So this seems pretty basic, *. * the demo definitely to be crafted so the model can handle the correct token limits at the right time and place. Absent that ....
üëç
6
+
Reply
jonwondo
5 days ago
I'm getting the same errors as the person above on the demo site. Must be a bug as I tried different prompts and had to wait ~1hr for each one due to the queue:
Error in generating model output:
litellm.ContextWindowExceededError: litellm.BadRequestError: ContextWindowExceededError: OpenAIException - Error code: 400 - {'error': {'message': "This model's maximum context length is 128000 tokens. However, your messages resulted in 709582 tokens. Please reduce the length of the messages.", 'type': 'invalid_request_error', 'param': 'messages', 'code': 'context_length_exceeded'}}
üëç
5
+
Reply
raidhon
5 days ago
Very cool thanks! I think OpenAI already hate Open Source :)))))
Products that are trying so hard to monetize are created in one day.
üëç
1
+
Reply
shtefcs
5 days ago
‚Ä¢
edited 5 days ago
This is a big step toward more capable AI agents. At Automatio.ai, we're working on integrating similar autonomous web agents to streamline data extraction and web automation, letting users build powerful scrapers without coding. The challenge is making sure these agents can navigate complex websites reliably. How do you see open-source AI helping bridge the gap between research prototypes and real-world automation?
+
Reply
MS100
5 days ago
Amazing. I am so interested in participating.
+
Reply
Kumala3
5 days ago
I am currently exploring Open-Source alternatives to OpenAI DeepResearch as it's a really great product, one of the most useful since ChatGPT was launched in 2022 for me, as the results of research are incredible high-quality not just simple research with "search" function.
I've decided to try out this Open Deep Research via Hugging face space and ran into issue with the returned output exceeded 128K token limit:
üëç
1
+
Reply
Kumala3
5 days ago
@albertvillanova
@clefourrier
Is there any way to resolve this issue or maybe set the instruction to set the output token limit to ensure it doesn't throw errors and works appropriately even with certain limitations?
PS. Working with limits is MUCH better than not working at all.
+
Reply
mrsmirf
5 days ago
Can we get a readme with instructions
üëç
1
+
Reply
derekalia
4 days ago
I tried running this locally but got a couple of errors with the run.py command after installing the requirements. Maybe you guys should add a readme to get this setup. https://github.com/huggingface/smolagents/blob/gaia-submission-r1/examples/open_deep_research/run.py
3 replies
¬∑
+
mrsmirf
4 days ago
Yeah I got errors too. Not sure if I need to install the entire repo, what to install, etc. But, I tried and have not gotten it to run.
üëÄ
3
+
Expand 2 replies
Dikeshwar
4 days ago
how to see future
+
Reply
TGAI87
4 days ago
Cursor is able to set this up nicely (and expand on it); just ensure you add the smolagents docs and direct it to the specific open deep research docs within the git repo under src.
1 reply
¬∑
üëç
2
+
Agenciarc360
3 days ago
fale mais meu amigo....
See translation
+
RocketNinja
4 days ago
Hey guys! The demo is down :/
üëç
7
üëÄ
1
+
Reply
Scrign29
3 days ago
impossible d‚Äôacc√©der √† la d√©mo.
See translation
+
Reply
griged
3 days ago
‚Ä¢
edited 3 days ago
I attempted a side by side comparison between your tool and the for pay Gemini Advanced 1.5 Pro with Deep Research for a particularly interesting and challenging task, but it is difficult to benchmark the results. Gemini did an overall poor - average job, but only after many manual additional prompts.
Initial prompt:
"what are the highest judgements received by tenants for claims relating to either negligent or intentional infliction of emotional distress in the last 10 years, against landlords in Massachusetts?"
result - it couldn't find anything
I further revised the workflow with prompts such as
"Please note it may also be in landlord lawsuits against tenants, where tenants win in counter claim"
"There may be some useful results there, but . regenerate following my two stated criteria of "in the last 10 years" and "In Massachusetts" and afterwards try to assess why your process missed this obvious mistake in its final output, and share with me your self analysis"
"please consider a few ways that your filtering can be expanded while still satisfying my criteria. 1. There are various statutory frameworks within which "negligent infliction of emotional distress" or "intentional infliction of emotional distress" can be brought. It could be in the context of Chapter 93A consumer protection, it could be in the context of M.G.L. c. 186, ¬ß14 , in particular when in counter claim in an eviction matter. 2. Those landmark older cases can be very helpful if you search cases that cite them, in particular simon vs. solomon and Haddad v. Gonzalez. 3. It is more diffiult to find regular cases than binding case law, a few suggestions, certain trial courts like the Western Division of the Massachusetts Housing court publishes it's 'court reporter' which is basically a data dump of almost all of their case rulings. 3. You were wise to scrape masscases.com as it has unpublished as well as published decisions which are of interest to me, and they use a scrape friendly URL scheme. judyrecords.com, trellis.law, docketalarm all chose to allow being crawled by google for purposes of appearing in google search results. The information I seek can almost always be inferred purely from the information made available to google, for example {massachusetts emotional distress tenant site:trellis.law} without the {} braces returns many cases. Please try again"
"Rader v Odermatt is an excellent example of a case matching my criteria. The tenant prevailed in counter claim, and was even awarded duplicative damages, normally discouraged and rare. Try to assess how you missed this case, output a revised list but also output your self analysis in your work flow"
I have omitted the self-analysis provided by Google, it was generally correct but as it recognized on its own, it failed to apply weights properly to my revisions. The other major hurdle of course is that for quazi-legal, sometimes technical, and due to outright politcal bias, most lower court, which in a way means "real cases", are very hard to find and even harder to scrape. I tried prompting with scraping strategies but in the end hardly any meaningful results were found. I had a certain results ready to assess its effectiveness. Unfortunetly your tool gave me the same error as stated by others upon just the first prompt
+
Reply
m-ric
Article author
3 days ago
The demo's up again!
1 reply
¬∑
‚ù§Ô∏è
2
+
karelwar
3 days ago
Not for a long time :(
+
pulkitmehtawork
1 day ago
I was able to run run.py locally .. please check solution at https://github.com/huggingface/smolagents/issues/501.. i have mentioned steps there .
+
Reply
onedayatime
about 20 hours ago
I read everything from A-Z. Thanks for this
+
Reply
Edit
Preview
Upload images, audio, and videos by dragging in the text input, pasting, or clicking here.
Comment
¬∑ Sign up or log in to comment
Upvote
857
+845
System theme
TOS
Privacy
About
Jobs
Models
Datasets
Spaces
Pricing
Docs
#+end_example

** Requests

Pros: pretty easy to setup, can use HTML parser to extract relationships between sections
Cons: hard to generalize

#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both :async
import requests
import bs4
import tqdm


link_template = "https://huggingface.co/blog?p={}"

i = 0
n_pages = 38#38


links = []

for i in tqdm.tqdm(range(n_pages)):
    response = requests.get(link_template.format(i)).text
    content = bs4.BeautifulSoup(response)
    for data in content(["style", "script"]):
        data.decompose()
    for l in content.select("a"):
        l = l.get("href")
        if l is not None and "blog" in l and not "blog?" in l:
            links.append(l)
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both
article_page = requests.get("http://huggingface.co" + links[11]).text
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both
"http://huggingface.co" + links[11]
#+END_SRC

#+RESULTS:
: http://huggingface.co/blog/ruslanmv/ai-reasoning-assistant

#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both
article_content = bs4.BeautifulSoup(article_page).find('div', class_="blog-content")
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both
from llama_index.core.node_parser import HTMLNodeParser
from llama_index.readers.web import SimpleWebPageReader

docs = SimpleWebPageReader().load_data(["http://huggingface.co" + links[11]])
html_parser = HTMLNodeParser()

nodes = html_parser.get_nodes_from_documents(docs)
len(nodes)

print(nodes[6].text)
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both
#+END_SRC

#+RESULTS:
: 1


#+BEGIN_SRC python :session llamaindex_webscraping.org  :exports both
nodes[0]
#+END_SRC

#+RESULTS:
: Node ID: a264bd03-aafc-482a-99f3-81142ebd917c
: Text: Models Datasets Spaces Posts Docs Enterprise Pricing   Log In
: Sign Up
